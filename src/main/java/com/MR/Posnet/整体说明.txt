1.posnet为主类,其中包含mapreduce的各项配置驱动
2.mapper程序：
对有用字段的提取，时间转型，以及时间段的划分，主要方法是lineFormater.format
输入：[imsi, pos, time]（形如[0000000000,00000174,2016-02-21 00:33:280000000000]）
输出：[imsi,timeflag ,pos,day]（形如[0000000000,00-09,00000174,day] 括号中前面两个是key后面两个是value）
3.reducer程序：
reducer主要对values进行了处理。
reducer中通过getSortedData方法将输入values中的时间点与基站位置进行了交换，又利用treemap的有序性对key(时间)进行了排序，便于之后利用calcStayTime方法计算在一个基站停留的时间。
calcStayTime返回一个装着基站位置和在该基站停留时间的hashmap。具体做法为：基站编号作为map的key，后一个时间点-前一个时间点=停留时间作为map的value，每做一次相减操作则会在map中寻找该基站编号是否已经在map中了，如果在map里面则取出已经存入的停留时间后加上这次的差值，如果没有该基站，则put进本次基站编号和本次的停留时间，如果计算得到的停留时间大于1小时则认为是脏数据舍弃。
以上计算都在同一用户在同一时间段的条件下，即reducer一次处理的一个key下面的values
输入：[imsi,timeflag (pos,day)(...)...]（形如[0000000000,00-09 {(00000174,2016-02-21 00:33:28)(...)(...).....}]）
即key=imsi+时段，value=｛(基站位置1，时间点1)，（基站位置2，时间点2）....｝
输出：imsi|时间段|基站位置|停留时间
4.TotalReducer：
在前面reducer的基础上，（前面reducer类已经将数据处理成了：imsi|时间段|基站位置|停留时间）
只保留每个用户每个时间段停留时间最长的基站位置，即找到最大的停留时间所对应的基站的位置，通过比较可找到停留时间的最大值和此时的基站位置

